You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.

Return the generated matrix.

 

Example 1:


Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:


Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.
 

Constraints:

1 <= m, n <= 105
1 <= m * n <= 105
The number of nodes in the list is in the range [1, m * n].
0 <= Node.val <= 1000


code--- #include <vector>

using namespace std;



class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        // Step 1: Extract values from the linked list
        vector<int> values;
        ListNode* curr = head;
        while (curr != nullptr) {
            values.push_back(curr->val);
            curr = curr->next;
        }
        
        // Step 2: Create and initialize the matrix
        vector<vector<int>> matrix(m, vector<int>(n, -1));
        
        // Step 3: Fill the matrix in spiral order
        int top = 0, bottom = m - 1, left = 0, right = n - 1;
        int index = 0;
        
        while (top <= bottom && left <= right) {
            // Fill the top row
            for (int i = left; i <= right; ++i) {
                if (index < values.size()) {
                    matrix[top][i] = values[index++];
                }
            }
            ++top;
            
            // Fill the right column
            for (int i = top; i <= bottom; ++i) {
                if (index < values.size()) {
                    matrix[i][right] = values[index++];
                }
            }
            --right;
            
            if (top <= bottom) {
                // Fill the bottom row
                for (int i = right; i >= left; --i) {
                    if (index < values.size()) {
                        matrix[bottom][i] = values[index++];
                    }
                }
                --bottom;
            }
            
            if (left <= right) {
                // Fill the left column
                for (int i = bottom; i >= top; --i) {
                    if (index < values.size()) {
                        matrix[i][left] = values[index++];
                    }
                }
                ++left;
            }
        }
        
        return matrix;
    }
};
