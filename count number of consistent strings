You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

 

Example 1:

Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
Output: 2
Explanation: Strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'.
Example 2:

Input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]
Output: 7
Explanation: All strings are consistent.
Example 3:

Input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]
Output: 4
Explanation: Strings "cc", "acd", "ac", and "d" are consistent.
 

Constraints:

1 <= words.length <= 104
1 <= allowed.length <= 26
1 <= words[i].length <= 10
The characters in allowed are distinct.
words[i] and allowed contain only lowercase English letters.


code------
class Solution {
public:
    int countConsistentStrings(string allowed, vector<string>& words) {
        // Step 1: Create a set of allowed characters for quick lookup
        unordered_set<char> allowedSet(allowed.begin(), allowed.end());
        
        // Step 2: Initialize the counter for consistent strings
        int consistentCount = 0;
        
        // Step 3: Check each word in the words array
        for (const string& word : words) {
            bool isConsistent = true;
            
            // Check if every character in the word is in the allowed set
            for (char c : word) {
                if (allowedSet.find(c) == allowedSet.end()) {
                    isConsistent = false;
                    break;
                }
            }
            
            // If the word is consistent, increase the counter
            if (isConsistent) {
                consistentCount++;
            }
        }
        
        // Step 4: Return the total count of consistent strings
        return consistentCount;
    }
};

