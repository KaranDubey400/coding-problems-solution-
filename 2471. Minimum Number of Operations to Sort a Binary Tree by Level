You are given the root of a binary tree with unique values.

In one operation, you can choose any two nodes at the same level and swap their values.

Return the minimum number of operations needed to make the values at each level sorted in a strictly increasing order.

The level of a node is the number of edges along the path between it and the root node.

 

Example 1:


Input: root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]
Output: 3
Explanation:
- Swap 4 and 3. The 2nd level becomes [3,4].
- Swap 7 and 5. The 3rd level becomes [5,6,8,7].
- Swap 8 and 7. The 3rd level becomes [5,6,7,8].
We used 3 operations so return 3.
It can be proven that 3 is the minimum number of operations needed.
Example 2:


Input: root = [1,3,2,7,6,5,4]
Output: 3
Explanation:
- Swap 3 and 2. The 2nd level becomes [2,3].
- Swap 7 and 4. The 3rd level becomes [4,6,5,7].
- Swap 6 and 5. The 3rd level becomes [4,5,6,7].
We used 3 operations so return 3.
It can be proven that 3 is the minimum number of operations needed.
Example 3:


Input: root = [1,2,3,4,5,6]
Output: 0
Explanation: Each level is already sorted in increasing order so return 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 105
All the values of the tree are unique.




code----
#include <vector>
#include <queue>
#include <algorithm>
#include <utility> // for pair
using namespace std;

// The TreeNode struct is assumed to be defined elsewhere

class Solution {
public:
    int minimumOperations(TreeNode* root) {
        if (!root) return 0; // If tree is empty, no operations are needed

        int totalOperations = 0;
        queue<TreeNode*> q;
        q.push(root);

        // Level-order traversal (BFS)
        while (!q.empty()) {
            int levelSize = q.size();
            vector<int> levelValues;
            vector<int> originalIndices;

            // Collect the values of the nodes at the current level
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* node = q.front();
                q.pop();
                levelValues.push_back(node->val);
                originalIndices.push_back(i);

                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }

            // Calculate the minimum swaps to sort the level values
            totalOperations += minSwapsToSort(levelValues, originalIndices);
        }

        return totalOperations;
    }

private:
    // Helper function to calculate minimum swaps needed to sort an array
    int minSwapsToSort(vector<int>& values, vector<int>& originalIndices) {
        int n = values.size();
        vector<pair<int, int>> valueIndexPair(n);

        // Pair each value with its original index
        for (int i = 0; i < n; ++i) {
            valueIndexPair[i] = {values[i], originalIndices[i]};
        }

        // Sort the pairs by value
        sort(valueIndexPair.begin(), valueIndexPair.end());

        vector<bool> visited(n, false);
        int swaps = 0;

        // Count the number of swaps using cycle decomposition
        for (int i = 0; i < n; ++i) {
            if (visited[i] || valueIndexPair[i].second == i) {
                continue; // Skip if already visited or already in correct position
            }

            int cycleSize = 0;
            int j = i;

            while (!visited[j]) {
                visited[j] = true;
                j = valueIndexPair[j].second;  // Move to the next index in the cycle
                cycleSize++;
            }

            // For a cycle of size k, we need (k-1) swaps
            if (cycleSize > 1) {
                swaps += (cycleSize - 1);
            }
        }

        return swaps;
    }
};
