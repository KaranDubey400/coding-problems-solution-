Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

 

Example 1:

Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
Example 2:

Input: n = 1, k = 1
Output: 1
 

Constraints:

1 <= k <= n <= 109


code-- 
#include <iostream>
#include <algorithm> 

using namespace std;

class Solution {
public:
    int findKthNumber(int n, int k) {
        long long curr = 1; // Start with the smallest number
        k -= 1; // Decrement k since we start counting from 1

        while (k > 0) {
            long long count = countNumbers(curr, n);
            if (count <= k) {
                // If count is less than or equal to k, move to the next prefix
                curr += 1;
                k -= count;
            } else {
                // If count is more than k, go deeper in the tree
                curr *= 10; // Go to the next level
                k -= 1; // We used one number
            }
        }

        return curr;
    }

private:
    long long countNumbers(long long prefix, long long n) {
        long long count = 0;

        long long first = prefix;
        long long last = prefix + 1;

        while (first <= n) {
            count += min(n + 1, last) - first; // Count valid numbers
            first *= 10; // Move to the next level
            last *= 10; // Move to the next level
        }

        return count; // Return the count of numbers
    }
};


