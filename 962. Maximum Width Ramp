A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

 

Example 1:

Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.
Example 2:

Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.
 

Constraints:

2 <= nums.length <= 5 * 104
0 <= nums[i] <= 5 * 104


code-------------
class Solution {
public:
    int maxWidthRamp(vector<int>& nums) {
        vector<int> stack;
        int n = nums.size();
        
        // Build the stack with indices where nums[i] is decreasing
        for (int i = 0; i < n; ++i) {
            if (stack.empty() || nums[stack.back()] > nums[i]) {
                stack.push_back(i);
            }
        }
        
        int max_width = 0;
        
        // Traverse from right to left
        for (int j = n - 1; j >= 0; --j) {
            // Check for valid ramp
            while (!stack.empty() && nums[stack.back()] <= nums[j]) {
                int i = stack.back();
                stack.pop_back();
                max_width = max(max_width, j - i);
            }
        }
        
        return max_width;
    }
};
