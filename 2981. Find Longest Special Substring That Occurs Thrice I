You are given a string s that consists of lowercase English letters.

A string is called special if it is made up of only a single character. For example, the string "abc" is not special, whereas the strings "ddd", "zz", and "f" are special.

Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "aaaa"
Output: 2
Explanation: The longest special substring which occurs thrice is "aa": substrings "aaaa", "aaaa", and "aaaa".
It can be shown that the maximum length achievable is 2.
Example 2:

Input: s = "abcdef"
Output: -1
Explanation: There exists no special substring which occurs at least thrice. Hence return -1.
Example 3:

Input: s = "abcaba"
Output: 1
Explanation: The longest special substring which occurs thrice is "a": substrings "abcaba", "abcaba", and "abcaba".
It can be shown that the maximum length achievable is 1.
 

Constraints:

3 <= s.length <= 50
s consists of only lowercase English letters.



code---
#include <vector>
#include <string>
using namespace std;

class Solution {
public:
    int maximumLength(string s) {
        int n = s.size();
        int l = 1, r = n;  // Binary search range

        // If no substring of length 1 occurs at least 3 times, return -1
        if (!helper(s, n, 1)) return -1;

        // Binary search to find the maximum valid length
        while (l + 1 < r) {
            int mid = (l + r) / 2;
            if (helper(s, n, mid)) {
                l = mid;  // Length is valid, try longer lengths
            } else {
                r = mid;  // Length is invalid, try shorter lengths
            }
        }

        return l;  // Maximum valid length
    }

private:
    bool helper(const string& s, int n, int x) {
        vector<int> cnt(26, 0);  // Count occurrences of each character
        int p = 0;  // Sliding window start pointer

        for (int i = 0; i < n; i++) {
            // Adjust the window until the substring is valid
            while (s[p] != s[i]) p++;

            // Check if the current window is of length >= x
            if (i - p + 1 >= x) cnt[s[i] - 'a']++;

            // If any substring occurs more than twice, return true
            if (cnt[s[i] - 'a'] > 2) return true;
        }

        return false;  // No valid substring found
    }
};
