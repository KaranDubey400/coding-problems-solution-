You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:

Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.
Return the total number of continuous subarrays.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [5,4,2,4]
Output: 8
Explanation: 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
 

Example 2:

Input: nums = [1,2,3]
Output: 6
Explanation: 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109



code----
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

class Solution {
public:
    long long continuousSubarrays(vector<int>& nums) {
        long long result = 0;
        int left = 0;
        unordered_map<int, int> freq_map;
        
        int min_val, max_val;
        
        for (int right = 0; right < nums.size(); ++right) {
            freq_map[nums[right]]++;
            
            // Update the min and max values in the current window
            min_val = nums[right];
            max_val = nums[right];
            
            // Update the min and max values by scanning through the frequency map
            for (auto& entry : freq_map) {
                min_val = min(min_val, entry.first);
                max_val = max(max_val, entry.first);
            }
            
            // While the condition is violated, move left pointer
            while (max_val - min_val > 2) {
                freq_map[nums[left]]--;
                if (freq_map[nums[left]] == 0) {
                    freq_map.erase(nums[left]);
                }
                left++;
                
                // Recalculate min and max after shrinking the window
                min_val = nums[left];
                max_val = nums[left];
                
                for (auto& entry : freq_map) {
                    min_val = min(min_val, entry.first);
                    max_val = max(max_val, entry.first);
                }
            }
            
            // The number of valid subarrays ending at 'right' is (right - left + 1)
            result += (right - left + 1);
        }
        
        return result;
    }
};

// Example usage:
// Solution sol;
// vector<int> nums = {5, 4, 2, 4};
// cout << sol.continuousSubarrays(nums) << endl;  // Output: 8
