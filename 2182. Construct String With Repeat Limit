You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s.

Return the lexicographically largest repeatLimitedString possible.

A string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.

 

Example 1:

Input: s = "cczazcc", repeatLimit = 3
Output: "zzcccac"
Explanation: We use all of the characters from s to construct the repeatLimitedString "zzcccac".
The letter 'a' appears at most 1 time in a row.
The letter 'c' appears at most 3 times in a row.
The letter 'z' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return "zzcccac".
Note that the string "zzcccca" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.
Example 2:

Input: s = "aababab", repeatLimit = 2
Output: "bbabaa"
Explanation: We use only some of the characters from s to construct the repeatLimitedString "bbabaa". 
The letter 'a' appears at most 2 times in a row.
The letter 'b' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return "bbabaa".
Note that the string "bbabaaa" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.
 

Constraints:

1 <= repeatLimit <= s.length <= 105
s consists of lowercase English letters.


code--
#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    string repeatLimitedString(string s, int repeatLimit) {
        // Count frequency of each character
        vector<int> freq(26, 0);
        for (char c : s) {
            freq[c - 'a']++;
        }
        
        // Max-heap to store characters by their ASCII value in descending order
        priority_queue<pair<int, char>> maxHeap;
        for (int i = 0; i < 26; ++i) {
            if (freq[i] > 0) {
                maxHeap.push({i, 'a' + i});
            }
        }
        
        string result;
        
        while (!maxHeap.empty()) {
            auto [topIndex, topChar] = maxHeap.top();
            maxHeap.pop();
            
            int useCount = min(freq[topIndex], repeatLimit);
            result.append(useCount, topChar);
            freq[topIndex] -= useCount;
            
            // If the current character cannot be used anymore (repeatLimit reached),
            // check if there's another character available
            if (freq[topIndex] > 0) {
                if (maxHeap.empty()) break;
                
                // Get the next character to reset the usage of the previous one
                auto [nextIndex, nextChar] = maxHeap.top();
                maxHeap.pop();
                
                result += nextChar;
                freq[nextIndex]--;
                
                // Push back the next character if it still has remaining counts
                if (freq[nextIndex] > 0) {
                    maxHeap.push({nextIndex, nextChar});
                }
                
                // Push the current character back as it still has remaining counts
                maxHeap.push({topIndex, topChar});
            }
        }
        
        return result;
    }
};
