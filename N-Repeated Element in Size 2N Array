ou are given an integer array nums with the following properties:

nums.length == 2 * n.
nums contains n + 1 unique elements.
Exactly one element of nums is repeated n times.
Return the element that is repeated n times.

 

Example 1:

Input: nums = [1,2,3,3]
Output: 3
Example 2:

Input: nums = [2,1,2,5,3,2]
Output: 2
Example 3:

Input: nums = [5,1,5,2,5,3,5,4]
Output: 5
 

Constraints:

2 <= n <= 5000
nums.length == 2 * n
0 <= nums[i] <= 104
nums contains n + 1 unique elements and one of them is repeated exactly n times.


code--- 
#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    int repeatedNTimes(vector<int>& nums) {
        unordered_map<int, int> freq;
        
        // Count frequencies of each element
        for (int num : nums) {
            freq[num]++;
        }
        
        // Find the element with frequency n
        int n = nums.size() / 2;
        for (const auto& [key, value] : freq) {
            if (value == n) {
                return key;
            }
        }
        
        // In case no element is found (shouldn't happen with valid input)
        return -1;
    }
};
