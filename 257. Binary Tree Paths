Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100


code===
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> paths;
        if (root) {
            dfs(root, "", paths);
        }
        return paths;
    }

private:
    void dfs(TreeNode* node, string path, vector<string>& paths) {
        if (!node) return;
        
        // Append the current node's value to the path
        path += to_string(node->val);
        
        // Check if it's a leaf node
        if (!node->left && !node->right) {
            paths.push_back(path); // If leaf, add the path to paths
        } else {
            // Otherwise, add "->" and continue to child nodes
            path += "->";
            dfs(node->left, path, paths);
            dfs(node->right, path, paths);
        }
    }
};
