Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1], k = 1
Output: 1
Example 2:

Input: nums = [1,2], k = 4
Output: -1
Example 3:

Input: nums = [2,-1,2], k = 3
Output: 3
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105
1 <= k <= 109


code--

class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        int n = nums.size();
        vector<long long> prefix(n + 1, 0);
        
        // Step 1: Compute the prefix sum array
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        
        // Step 2: Use a deque to find the shortest subarray with sum >= k
        deque<int> dq;
        int minLength = n + 1;
        
        for (int j = 0; j <= n; ++j) {
            // Remove elements from the front if they form a valid subarray
            while (!dq.empty() && prefix[j] - prefix[dq.front()] >= k) {
                minLength = min(minLength, j - dq.front());
                dq.pop_front();
            }
            
            // Remove elements from the back if they are not useful
            while (!dq.empty() && prefix[j] <= prefix[dq.back()]) {
                dq.pop_back();
            }
            
            // Add the current index to the deque
            dq.push_back(j);
        }
        
        // If minLength was updated, return it; otherwise, return -1
        return minLength <= n ? minLength : -1;
    }
};
