The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:

It has a length of k.
It is a divisor of num.
Given integers num and k, return the k-beauty of num.

Note:

Leading zeros are allowed.
0 is not a divisor of any value.
A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: num = 240, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "24" from "240": 24 is a divisor of 240.
- "40" from "240": 40 is a divisor of 240.
Therefore, the k-beauty is 2.
Example 2:

Input: num = 430043, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "43" from "430043": 43 is a divisor of 430043.
- "30" from "430043": 30 is not a divisor of 430043.
- "00" from "430043": 0 is not a divisor of 430043.
- "04" from "430043": 4 is not a divisor of 430043.
- "43" from "430043": 43 is a divisor of 430043.
Therefore, the k-beauty is 2.
 

Constraints:

1 <= num <= 109
1 <= k <= num.length (taking num as a string)


code---
class Solution {
public:
    int divisorSubstrings(int num, int k) {
        // Convert the number to a string
        string numStr = to_string(num);
        int count = 0;
        
        // Iterate through the string to find substrings of length k
        for (int i = 0; i <= numStr.length() - k; i++) {
            // Extract the substring of length k
            string substring = numStr.substr(i, k);
            
            // Convert substring to an integer
            int divisor = stoi(substring);
            
            // Check if divisor is not zero and num is divisible by it
            if (divisor != 0 && num % divisor == 0) {
                count++; // Increment the count if it's a valid divisor
            }
        }
        
        return count; // Return the k-beauty
    }
};
