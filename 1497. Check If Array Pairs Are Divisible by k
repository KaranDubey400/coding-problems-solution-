Given an array of integers arr, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

Rank is an integer starting from 1.
The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
Rank should be as small as possible.
 

Example 1:

Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.
Example 2:

Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.
Example 3:

Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]
 

Constraints:

0 <= arr.length <= 105
-109 <= arr[i] <= 109



code------------------------------
class Solution {
public:
    bool canArrange(vector<int>& arr, int k) {
        // Create a frequency array to count remainders
        vector<int> remainderCount(k, 0);

        // Count the remainders when dividing each element by k
        for (int num : arr) {
            // Handle negative numbers properly using (num % k + k) % k
            int remainder = ((num % k) + k) % k;
            remainderCount[remainder]++;
        }

        // Check if we can pair remainders properly
        for (int i = 0; i <= k / 2; ++i) {
            if (i == 0) {
                // Special case: remainder 0 needs to have an even count
                if (remainderCount[i] % 2 != 0) {
                    return false;
                }
            } else {
                // The count of remainder i should match the count of remainder k - i
                if (remainderCount[i] != remainderCount[k - i]) {
                    return false;
                }
            }
        }

        return true;
    }
};
